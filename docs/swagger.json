{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "AquaTrack app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of students app"
  },
  "servers": [
    {
      "url": "http://localhost:4000"
    },
    {
      "url": "https://aquatrack-bd.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Water",
      "description": "Operations about water."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register User",
        "operationId": "registerUser",
        "description": "Register user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email should have at least 'two' domain segments separated by a dot.",
                    "type": "string",
                    "example": "example@domain.com"
                  },
                  "password": {
                    "description": "The user's password can consist of both letters and numbers.",
                    "type": "string",
                    "example": "123df123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Register user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/auth"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
<<<<<<< HEAD
    "/auth/login": {
=======
    "/auth/send-reset-email": {
>>>>>>> update-tokens-pwd
      "post": {
        "tags": [
          "Auth"
        ],
<<<<<<< HEAD
        "summary": "Login User",
        "operationId": "loginUser",
        "description": "Login User in the Application",
=======
        "summary": "Send reset password to email",
        "operationId": "sendResetToken",
        "description": "Send reset password message to email from the Application",
>>>>>>> update-tokens-pwd
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
<<<<<<< HEAD
                  "email",
                  "password"
=======
                  "email"
>>>>>>> update-tokens-pwd
                ],
                "properties": {
                  "email": {
                    "description": "User Email",
                    "type": "string"
<<<<<<< HEAD
                  },
                  "password": {
                    "description": "User Password",
                    "type": "string"
=======
>>>>>>> update-tokens-pwd
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in an user!",
            "description": "Reset password email was successfully sent!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "/UGIArv7wPULCiyYg6OwHQvIHeYjtdwO4n5i+WTW"
                        }
                      }
                      "example": "Password was successfully reset!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
<<<<<<< HEAD
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404-contact"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user from system",
        "operationId": "logoutUser",
        "description": "Logout user from system",
        "security": [],
        "responses": {
          "204": {
            "description": "Logout user from system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session token",
        "operationId": "refreshUsersSession",
        "description": "Refreshes the user session, generates a new access token and updates cookies.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully refreshed user session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "description": "Session token",
                          "type": "string",
                          "example": "/UGIArv7wPULCiyYg6OwHQvIHeYjtdwO4n5i+WTW"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404-session"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/data": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get current user's data",
        "operationId": "getCurrentData",
        "description": "Get all current user's data",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully recieved user's current data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully recieved user's current data"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "name",
                        "email",
                        "gender",
                        "weight",
                        "dailySportTime",
                        "dailyWaterNorm",
                        "avatar"
                      ],
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "67cad75e84050dd76cc883ba",
                          "description": "User's id"
                        },
                        "name": {
                          "type": "string",
                          "minLength": 3,
                          "maxLength": 12,
                          "example": "John Doe",
                          "description": "User's name",
                          "default": "User"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com",
                          "description": "User's email"
                        },
                        "gender": {
                          "type": "string",
                          "enum": [
                            "woman",
                            "man"
                          ],
                          "example": "woman",
                          "default": "woman",
                          "description": "User's gender"
                        },
                        "weight": {
                          "type": "number",
                          "example": 65,
                          "minimum": 0,
                          "maximum": 500,
                          "default": 65,
                          "description": "User's weight in kg"
                        },
                        "dailySportTime": {
                          "type": "number",
                          "format": "float",
                          "example": 24,
                          "minimum": 0,
                          "maximum": 24,
                          "default": 0,
                          "description": "Hours of user's sport time per day"
                        },
                        "dailyWaterNorm": {
                          "type": "number",
                          "format": "float",
                          "example": 500,
                          "minimum": 1500,
                          "maximum": 15000,
                          "default": 1500,
                          "description": "User's daily water norm in ml"
                        },
                        "avatar": {
                          "type": "string",
                          "format": "binary",
                          "example": "https://example.com/avatar.jpg",
                          "default": "https://res.cloudinary.com/dobkaq79k/image/upload/v1739270697/lz54yboqjkimsheddhoj.jpg",
                          "description": "Link to user's avatar"
                        }
                      }
                    }
                  }
                }
              }
            }
=======
          "400": {
            "$ref": "#/components/responses/400"
>>>>>>> update-tokens-pwd
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
<<<<<<< HEAD
    "/auth/count": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get total count of registered users",
        "operationId": "getUsersCount",
        "description": "Get count of all registered users",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully get count of all users",
=======
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPassword",
        "description": "Reset password from email message in the Application",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "description": "JWT Token from email",
                    "type": "string"
                  },
                  "password": {
                    "description": "New password",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password was successfully reset!",
>>>>>>> update-tokens-pwd
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
<<<<<<< HEAD
                      "example": "Successfully get count of all users"
                    },
                    "data": {
                      "type": "string",
                      "example": 5
=======
                      "example": "Password was successfully reset!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
>>>>>>> update-tokens-pwd
                    }
                  }
                }
              }
            }
          },
<<<<<<< HEAD
=======
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
>>>>>>> update-tokens-pwd
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "auth": {
        "type": "object",
        "required": [
          "_id",
          "email"
        ],
        "properties": {
          "_id": {
            "description": "User`s id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "email": {
            "description": "User`s email",
            "type": "string",
            "example": "example@domain.com"
          },
          "name": {
            "description": "Default user`s name, which can be changed later",
            "type": "string",
            "example": "User"
          },
          "gender": {
            "description": "User`s gender",
            "type": "string",
            "enum": [
              "woman",
              "man"
            ]
          },
          "weight": {
            "type": "string",
            "description": "User`s weight must be a positive number, not exceeding 500. Unit measurement is \"kg\" in data base ",
            "example": 70
          },
          "dailySportTime": {
            "type": "string",
            "description": "User`s daily sport time must be a positive number, not exceeding 24. Unit measurement is \"hours\" in data base ",
            "example": 12
          },
          "dailyWaterNorm": {
            "type": "string",
            "description": "User`s daily water norm must be a positive number, not exceeding 15000. Unit measurement is \"ml\" in data base ",
            "example": 1500
          },
          "avatar": {
            "description": "Link to user's avatar",
            "type": "string",
            "example": "https://res.cloudinary.com/dobkaq79k/image/upload/v1739270697/lz54yboqjkimsheddhoj.jpg"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "example": "[{Error`s details}]"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
<<<<<<< HEAD
                  "example": "User not found"
=======
                  "example": "Not found"
>>>>>>> update-tokens-pwd
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
<<<<<<< HEAD
      },
      "404-contact": {
        "description": "Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404-session": {
        "description": "Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Session not found"
                    }
                  }
                }
              }
            }
          }
        }
=======
>>>>>>> update-tokens-pwd
      }
    }
  }
}
